"""
Django settings for NLU project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
# import os
# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # Suppress TensorFlow-related logs
# import logging
# logging.getLogger("transformers").setLevel(logging.ERROR)
# logging.getLogger("absl").setLevel(logging.ERROR)

from pathlib import Path
from dotenv import load_dotenv
env_path = Path(__file__).resolve().parent.parent / '.env'
load_dotenv(dotenv_path=env_path)
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
PORT = os.environ.get('PORT', '8000')

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.railway.app',
    'healthcheck.railway.app',
    'interview-backend-production-bdf0.up.railway.app',
    "https://talent-scout-flax.vercel.app",

]
# Make sure Django binds to the port provided by Railway

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    # 'Emotion_Detection',
    # 'question_management',
    'corsheaders',
    'authentication',
    'job_posting',
    'interview',
    'rest_framework_simplejwt.token_blacklist',  # Optional for logout
    'social_django',
    'django_filters',
    'confidence_prediction',
    'cloudinary',
    'cloudinary_storage',

]
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET')
}

import cloudinary

# Direct Cloudinary configuration
cloudinary.config(
    cloud_name=os.getenv('CLOUDINARY_CLOUD_NAME'),
    api_key=os.getenv('CLOUDINARY_API_KEY'),
    api_secret=os.getenv('CLOUDINARY_API_SECRET')
)
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # ðŸ‘ˆ 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    
]

AUTHENTICATION_BACKENDS = (
    # other authentication backends
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.google.GoogleOAuth2',  # Add Google backend
)
# CORS settings
CORS_ALLOWED_ORIGINS = [
    "interview-backend-production-bdf0.up.railway.app",
    "https://talent-scout-flax.vercel.app",
]


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# AUTH_USER_MODEL = 'authentication.CustomUser'

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
# DRF Authentication settings
# In settings.py
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

}

# Override for specific views
SPECTACULAR_SETTINGS = {
    'PUBLIC_URLS': [
        'api/authentication/register/',
        'api/authentication/token/',
        'api/authentication/token/refresh/',
    ]
}
# MIDDLEWARE.insert(0, 'corsheaders.middleware.CorsMiddleware')

WSGI_APPLICATION = 'backend.wsgi.application'
# In settings.py
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'Lax'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


# Database Configuration for Django
import os
import dj_database_url

# Environment detection
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
POSTGRES_LOCALLY = os.getenv("POSTGRES_LOCALLY", "False").lower() == "true"

# Default configuration for PostgreSQL (used when individual environment variables are set)
DEFAULT_DB = {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': os.getenv("DB_NAME"),
    'USER': os.getenv("DB_USER"),
    'PASSWORD': os.getenv("DB_PASSWORD"),
    'HOST': os.getenv("DB_HOST"),
    'PORT': os.getenv("DB_PORT", "5432"),
    'CONN_MAX_AGE': 60,
    'OPTIONS': {
        'sslmode': 'require',
    }
}

# SQLite fallback for development
SQLITE_DB = {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
}

# Use DATABASE_URL if available (takes precedence)
if os.getenv("DATABASE_URL"):
    # Parse the DATABASE_URL
    DATABASES = {
        'default': dj_database_url.config(
            default=os.getenv("DATABASE_URL"),
            conn_max_age=600,
            ssl_require=True,
        )
    }
# Otherwise, use individual environment variables if they're set
elif all([os.getenv("DB_NAME"), os.getenv("DB_USER"), os.getenv("DB_PASSWORD"), os.getenv("DB_HOST")]):
    DATABASES = {'default': DEFAULT_DB}
# Fall back to SQLite if nothing else is configured
else:
    DATABASES = {'default': SQLITE_DB}

# For debugging database connection issues
if os.getenv("DEBUG_DB", "False").lower() == "true":
    import sys
    print(f"Environment: {ENVIRONMENT}", file=sys.stderr)
    print(f"Database URL present: {'Yes' if os.getenv('DATABASE_URL') else 'No'}", file=sys.stderr)
    print(f"Database Engine: {DATABASES['default'].get('ENGINE', 'Not set')}", file=sys.stderr)
    if os.getenv("DATABASE_URL"):
        # Don't print actual credentials but show we're using the URL
        print("Using DATABASE_URL for connection", file=sys.stderr)
    else:
        print(f"DB Host: {os.getenv('DB_HOST', 'Not set')}", file=sys.stderr)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# settings.py(Using it while applying doing face verification)
BASE_URL = 'interview-backend-production-bdf0.up.railway.app'  # For development
# BASE_URL = 'https://your-domain.com'  # For production
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# settings.py

import os

STATIC_URL = '/static/'

# The directory where collectstatic will put static files for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Enable gzip and file caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
os.makedirs(os.path.join(MEDIA_ROOT, 'temp'), exist_ok=True)



# Google OAuth2 settings
GOOGLE_OAUTH2_CLIENT_ID = os.getenv("GOOGLE_AUTH_ID")
GOOGLE_OAUTH2_CLIENT_SECRET = os.getenv("GOOGLE_AUTH_SECRET")


# Add these settings
# GOOGLE_OAUTH_REDIRECT_URI = "http://localhost:3000"
GOOGLE_OAUTH2_REDIRECT_URI = "http://interview-backend-production-bdf0.up.railway.app/auth/google/callback"

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Or your SMTP server
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'zubair12r1zk@gmail.com'
EMAIL_HOST_PASSWORD = 'hgwo zamg vvty ctti'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Add this to your LOGGING configuration if not already present
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
    },
}


# settings.py

# Update LinkedIn scopes
LINKEDIN_SCOPES = [
    'openid',
    'profile',
    'email',
    'w_member_social'
]
# settings.py
# LINKEDIN_CLIENT_ID = '77vhqq226n7kdr'
# LINKEDIN_CLIENT_SECRET = 'WPL_AP1.oTXoZkEwQqLKvDwq.RTV6zw=='
# LINKEDIN_REDIRECT_URI = 'http://localhost:5173/linkedin/callback'  # Changed from linkedin-callback to linkedin/callback
FRONTEND_URL = "https://talent-scout-flax.vercel.app",  # Make sure this matches your frontend URL
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Make sure sessions are properly configured
SESSION_COOKIE_SECURE = False  # Set to True in production
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = False    # Set to True in production

from datetime import timedelta
CSRF_TRUSTED_ORIGINS = ['https://interview-backend-production-bdf0.up.railway.app', "https://talent-scout-flax.vercel.app"]  
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    'https://talent-scout-flax.vercel.app'
]

# Your other imports and settings...

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'AUTH_COOKIE': 'access_token',  # Cookie name for access token
    'AUTH_COOKIE_REFRESH': 'refresh_token',  # Cookie name for refresh token
    'AUTH_COOKIE_SECURE': True,  # Only send cookie over HTTPS
    'AUTH_COOKIE_HTTP_ONLY': True,  # Prevent JavaScript access
    'AUTH_COOKIE_SAMESITE': 'Lax',  # Protection against CSRF
    'AUTH_COOKIE_PATH': '/',  # Cookie path
}




ADMIN_EMAILS = [
    'faizan2021@namal.edu.pk',
    'zubair2021@namal.edu.pk'
]